<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!-- 引入外部文件 -->
    <!--
        1、mybatis可以使用properties来引入外部properties配置文件的内容；
        resource：引入类路径下的资源
        url：引入网络路径或者磁盘路径下的资源
     -->
    <properties resource="jdbc.properties"/>


    <typeHandlers>
        <!--<typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="com.DanceBytes.mybatis.bean.EmpStatus"/>-->
        <!--1、配置我们自定义的TypeHandler  -->
        <typeHandler handler="com.DanceBytes.mybatis.typehandler.MyEnumEmpStatusTypeHandler" javaType="com.DanceBytes.mybatis.bean.EmpStatus"/>
        <!--2、也可以在处理某个字段的时候告诉MyBatis用什么类型处理器
				保存：#{empStatus,typeHandler=xxxx}
				查询：
					<resultMap type="com.DanceBytes.mybatis.bean.Employee" id="MyEmp">
				 		<id column="id" property="id"/>
				 		<result column="empStatus" property="empStatus" typeHandler=""/>
				 	</resultMap>
				注意：如果在参数位置修改TypeHandler，应该保证保存数据和查询数据用的TypeHandler是一样的。
		  -->
    </typeHandlers>
    
    
    <!--plugins：注册插件  -->
    <plugins>
<!--        <plugin interceptor="com.DanceBytes.mybatis.dao.MyFirstPlugin">-->
<!--            <property name="username" value="root"/>-->
<!--            <property name="password" value="123456"/>-->
<!--        </plugin>-->
<!--        <plugin interceptor="com.DanceBytes.mybatis.dao.MySecondPlugin"></plugin>-->

    <!-- 分页插件-->
        <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
    </plugins>


    <!--
		2、settings包含很多重要的设置项
		setting:用来设置每一个设置项
			name：设置项名
			value：设置项取值
	 -->

    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${prop.driverClass}"/>
                <property name="url" value="${prop.url}"/>
                <property name="username" value="${prop.username}"/>
                <property name="password" value="${prop.password}"/>
            </dataSource>
        </environment>
    </environments>


    <!--
        5、databaseIdProvider：支持多数据库厂商的；
        type="DB_VENDOR"：VendorDatabaseIdProvider
        作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
        MySQL，Oracle，SQL Server,xxxx
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>


    <!-- 将我们写好的sql映射文件（EmployeeMapper.xml）
        一定要注册到全局配置文件（mybatis-config.xml）中 -->
    <!-- 6、mappers：将sql映射注册到全局配置中 -->
    <mappers>
        <!--
            mapper:注册一个sql映射
                注册配置文件
                resource：引用类路径下的sql映射文件
                    mybatis/mapper/EmployeeMapper.xml
                url：引用网路路径或者磁盘路径下的sql映射文件
                    file:///var/mappers/AuthorMapper.xml

                注册接口
                class：引用（注册）接口，
                    1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
                    2、没有sql映射文件，所有的sql都是利用注解写在接口上;
                    推荐：
                        比较重要的，复杂的Dao接口我们来写sql映射文件
                        不重要，简单的Dao接口为了开发快速可以使用注解；
        -->
<!--         <mapper resource="mybatis/mapper/EmployeeMapper.xml"/>-->
        <!-- <mapper class="com.DanceBytes.mybatis.dao.EmployeeMapperAnnotation"/> -->

        <!-- 批量注册： -->
        <package name="com/DanceBytes/mybatis/dao"/>
    </mappers>
</configuration>