<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.DanceBytes.mybatis.EmployeeMapperDynamicSQL">
    <!--
• if:判断
• choose (when, otherwise):分支选择；带了break的swtich-case
	如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
• trim 字符串截取(where(封装查询条件), set(封装修改条件))
• foreach 遍历集合
	 -->
    <!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 -->
    <select id="getEmpsByConditionIf" resultType="com.DanceBytes.mybatis.Employee">
        select * from tbl_employee
        <!-- where -->
        <where>
            <!-- test：判断表达式（OGNL）
            OGNL参照PPT或者官方文档。
                   c:if  test
            从参数中取值进行判断

            遇见特殊符号应该去写转义字符：
            &&：

            查询的时候如果某些条件没带可能sql拼装会有问题
            1、给where后面加上1=1，以后的条件都and xxx.
            2、mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉
            where只会去掉第一个多出来的and或者or。-->

            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                and email=#{email}
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                and gender=#{gender}
            </if>
        </where>
    </select>

    <!-- Trim   -->
    <select id="getEmpsByConditionTrim" resultType="com.DanceBytes.mybatis.Employee">
        select * from tbl_employee
        <!--
            后面多出的and或者or where标签不能解决
            prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
            prefix给拼串后的整个字符串加一个前缀
            prefixOverrides="":
            前缀覆盖： 去掉整个字符串前面多余的字符
            suffix="":后缀
            suffix给拼串后的整个字符串加一个后缀
            suffixOverrides=""
            后缀覆盖：去掉整个字符串后面多余的字符
        -->
        <!-- 自定义字符串的截取规则 -->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                 last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                 email=#{email} and
            </if>
            <!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
            <if test="gender==0 or gender==1">
                 gender=#{gender}
            </if>
        </trim>
    </select>

    <!-- Choose -->
    <select id="getEmpsByConditionChoose" resultType="com.DanceBytes.mybatis.Employee">
        select * from tbl_employee
        <where>
            <!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name like #{lastName}
                </when>
                <when test="email!=null">
                    email=${email}
                </when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>


    <!-- set if   -->
    <select id="updateEmployee">
        update tbl_employee
         <!--<set>-->
         <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
         </trim>
        <!--</set>-->
        where id=#{id}
    </select>


    <!-- foreach 查询-->
    <select id="getEmpsByConditionForeach" resultType="com.DanceBytes.mybatis.Employee">
        select * from tbl_employee
        <foreach collection="ids" item="item_id" separator="," open="where id in(" close=")">
            #{item_id}
        </foreach>

        <!--
           collection：指定要遍历的集合：
               list类型的参数会特殊处理封装在map中，map的key就叫list
           item：将当前遍历出的元素赋值给指定的变量
           separator:每个元素之间的分隔符
           open：遍历出所有结果拼接一个开始的字符
           close:遍历出所有结果拼接一个结束的字符
           index:索引。遍历list的时候是index就是索引，item就是当前值
                      遍历map的时候index表示的就是map的key，item就是map的值

           #{变量名}就能取出变量的值也就是当前遍历出的元素
        -->
    </select>

    <!-- foreach  批量保存 -->
    <!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法-->
    <insert id="addEmployeesByForeach">
        insert into tbl_employee(
            <include refid="insertColumn"></include>
        )
        values
        <foreach collection="employees" item="employee" separator=",">
            (#{employee.lastName}, #{employee.email}, #{employee.gender},#{employee.dept.id})
        </foreach>
    </insert>


    <!--
        两个内置参数：
             不只是方法传递过来的参数可以被用来判断，取值。。。
             mybatis默认还有两个内置参数：
             _parameter:代表整个参数
                 单个参数：_parameter就是这个参数
                 多个参数：参数会被封装为一个map；_parameter就是代表这个map
             _databaseId:如果配置了databaseIdProvider标签。
                 _databaseId就是代表当前数据库的别名oracle
      -->
    <!-- _parameter _databaseId-->
    <select id="getEmployeeTestInnerParameter" resultType="com.DanceBytes.mybatis.Employee">
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">
                where last_name like #{lastName}
            </if>
        </if>
    </select>

    <!-- Bind -->
    <select id="getEmployeeTestInnerParameterBind" resultType="com.DanceBytes.mybatis.Employee">
        <!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">
                where last_name like #{_lastName}
            </if>
        </if>
    </select>


    <!--
         抽取可重用的sql片段。方便后面引用
         1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
         2、include来引用已经抽取的sql：
         3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
                 include-property：取值的正确方式${prop},
                 #{不能使用这种方式}
     -->
    <!-- 调用方式 <include refid="insertColumn"></include>   -->
    <sql id="insertColumn">
        <if test="_databaseId=='oracle'">
            employee_id,last_name,email
        </if>
        <if test="_databaseId=='mysql'">
            last_name,email,gender,d_id
        </if>
    </sql>


</mapper>